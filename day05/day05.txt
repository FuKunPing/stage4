3.路由

    8) 路由之间参数的传递
        通过router-link标签中的to属性
        1) to='/about?aaa=1'
        2) :to='{name:"路由名",params:{key:value}}'
            to: 通过v-bind绑定(v-bind:to  /  :to)
            name:路由配置时指定的name属性的值
            params： 传递的参数{}

    9) 路由对象$route
        表示当前激活的路由的基本信息，包括 fullpath，params，path，query，name..
        注意：路由不是不变的，每次路由切换成功后都会产生一个新的路由对象
        在组件中使用$route来获取路由信息

    10) 编程式导航(this.$router.push)
        使用router-link标签进行路由的跳转，但是在业务逻辑代码中，无法使用router-link标签，
        所以只能使用编程式导航。
        使用编程式导航，需要借助router对象
        在组件内部，可以通过this.$router访问路由对象(this.$router(new VueRouter出来的)只有一个)

        [下载jquery
        $ npm i jquery --save
        打包
        npm run build
        下载模块stage4
        cnpm i express]

    11) 动态路由(path:":url")
        配置路由时，如果遇到这种情况：
            根据不同的参数渲染不同的内容，但是用的是同一个组件，可以使用动态路由
        配置方式：  path: ":id"

    12) 路由中的守卫函数
        beforeEach ----全局前置守卫
        beforeEnter,beforeUpdate,beforeLeave ----组件内的守卫
        afterEach ----全局后置钩子(没有next)
            /*
            to: Route: 即将要进入的目标 路由对象
            from: Route: 当前导航正要离开的路由
            next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。   
            */
        1.router对象设置全局守卫函数，对所有路由都有效
        2.路由独享守卫，配置在routes属性中某个路由里面，只对该路由有效
        3.配置在某个组件中，只对该组件有效

        //例子说明
        const Foo = {
            template: `...`,
            beforeRouteEnter (to, from, next) {
                // 在渲染该组件的对应路由被 confirm 前调用
                // 不！能！获取组件实例 `this`
                // 因为当守卫执行前，组件实例还没被创建
            },
            beforeRouteUpdate (to, from, next) {
                // 在当前路由改变，但是该组件被复用时调用
                // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
                // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
                // 可以访问组件实例 `this`
            },
            beforeRouteLeave (to, from, next) {
                // 导航离开该组件的对应路由时调用
                // 可以访问组件实例 `this`
            }
            }
    
    13) 数据的获取
        通过路由跳转到对应的组件，组件的内容肯定是通过请求获取的
        created当组件创建成功后，调用获取数据的请求方法，获取数据后
        将数据赋值给某个变量，进而渲染到视图上

    14) 过渡动画
        


